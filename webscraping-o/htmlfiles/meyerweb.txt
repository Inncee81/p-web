<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en-US">
 <head profile="http://gmpg.org/xfn/1">
  <link href="https://indieauth.com/openid" rel="openid.server"/>
  <link href="http://meyerweb.com" rel="openid.delegate"/>
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
  <link href="/favicon.ico" rel="shortcut icon"/>
  <link href="http://meyerweb.com/" rel="home" title="Home"/>
  <link href="http://www.myopenid.com/server" rel="openid.server"/>
  <link href="http://emeyer.myopenid.com/" rel="openid.delegate"/>
  <meta content="I_JFi4WrY6bW7AE2ya5sSlruVvgvrIeRa1IsqO0GB78" name="google-site-verification"/>
  <link href="/eric/thoughts/rss2/full" rel="alternate" title="Thoughts From Eric" type="application/rss+xml"/>
  <link href="/eric/thoughts/category/tech/rss2/full" rel="alternate" title="Thoughts From Eric (only technical posts)" type="application/rss+xml"/>
  <link href="/eric/thoughts/category/personal/rss2/full" rel="alternate" title="Thoughts From Eric (only personal posts)" type="application/rss+xml"/>
  <link href="/feeds/excuse/rss20.xml" rel="alternate" title="Excuse of the Day" type="application/rss+xml"/>
  <link href="/ui/meyerweb.css" rel="stylesheet" type="text/css"/>
  <meta content="summary" name="twitter:card"/>
  <meta content="@meyerweb" name="twitter:site"/>
  <meta content="meyerweb.com" name="twitter:title"/>
  <meta content="The web home of Eric A. Meyer, CSS guy; and his wife Kathryn, doctor of nursing." name="twitter:description"/>
  <meta content="https://meyerweb.com/" name="twitter:url"/>
  <meta content="https://meyerweb.com/ui/i/heart/663399love.png" name="twitter:image"/>
  <meta content="192" name="twitter:image:width"/>
  <meta content="192" name="twitter:image:height"/>
  <meta content="website" property="og:type"/>
  <meta content="https://meyerweb.com/ui/i/hamonshu/fb-og-image.png" property="og:image"/>
  <link href="https://meyerweb.com/eric/thoughts/wp-content/themes/meyerweb-2020/style.css" rel="stylesheet" type="text/css"/>
  <title>
   meyerweb.com
  </title>
 </head>
 <body class="hpg" id="www-meyerweb-com">
  <header id="sitemast" role="banner">
   <h1>
    <a href="/">
     meyerweb.com
    </a>
   </h1>
   <nav aria-label="page" id="skiplinks" role="navigation">
    <a href="#main">
     Main content
    </a>
    <a href="#navigate">
     Navigation links
    </a>
    <a href="#footer">
     Footer
    </a>
   </nav>
  </header>
  <nav aria-label="site" id="navigate" role="navigation">
   <ul id="navlinks">
    <li id="archLink">
     <a href="/eric/thoughts/">
      Post Archives
     </a>
    </li>
    <li id="cssLink">
     <a href="/eric/css/">
      CSS Work
     </a>
    </li>
    <li id="toolsLink">
     <a href="/eric/tools/">
      Toolbox
     </a>
    </li>
    <li id="writeLink">
     <a href="/eric/writing.html">
      Writing
     </a>
    </li>
    <li id="speakLink">
     <a href="/eric/talks/">
      Speaking
     </a>
    </li>
    <li id="otherLink">
     <a href="/other/">
      Other Stuff
     </a>
    </li>
    <li id="aboutsite">
     <a href="/ui/about.html">
      About this site
     </a>
    </li>
   </ul>
  </nav>
  <div id="main">
   <main id="thoughts" role="main">
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2021/03/15/month-one/" rel="bookmark" title="Permanent Link: First Month at Igalia">
        First Month at Igalia
       </a>
      </h2>
      <em class="pubtime">
       Published  6 days past
      </em>
     </header>
     <div class="text">
      <p>
       Today marks one month at
       <a href="https://igalia.com/">
        Igalia
       </a>
       .  It’s been a lot, and there’s more to come, but it’s been a really great experience.  I get to do things I really enjoy and value, and Igalia supports and encourages all of it without trying to steer me in specific directions.  I’ve been incredibly lucky to experience that kind of working environment twice in my life—and the other one was
       <a href="https://aneventapart.com/">
        an outfit I helped create
       </a>
       .
      </p>
      <p>
       Here’s a summary of what I’ve been up to:
      </p>
      <ul>
       <li>
        Generally got up to speed on what Igalia is working on (spoiler: a
        <strong>
         lot
        </strong>
        ).
       </li>
       <li>
        Redesigned parts of
        <a href="https://wpewebkit.org">
         wpewebkit.org
        </a>
        , fixed a few outstanding bugs, edited most of the rest. (The site runs on
        <a href="https://www.11ty.dev/">
         11ty
        </a>
        , so I’ve been learning that as well.)
       </li>
       <li>
        Wrote a bunch of CSS tests/demos that will form the basis for other works, like articles and videos.
       </li>
       <li>
        Drafted a few of said articles.  As I write this, two are very close to being complete, and a third is almost ready for editing.
       </li>
       <li>
        Edited some pages on the
        <a href="https://developer.mozilla.org/en-US/">
         Mozilla Developer Network
        </a>
        (MDN), clarifying or upgrading text in some places and replacing unclear examples in others.
       </li>
       <li>
        Joined the
        <a href="https://opencollective.com/open-web-docs">
         Open Web Docs
        </a>
        Steering Committee.
       </li>
       <li>
        Reviewed various specs and proposals (e.g.,
        <a href="https://miriamsuzanne.com" rel="met colleague acquaintance">
         Miriam
        </a>
        ’s very interesting
        <a href="https://github.com/oddbird/css-sandbox/blob/main/src/scope/explainer.md">
         <code>
          @scope
         </code>
         proposal
        </a>
        ).
       </li>
      </ul>
      <p>
       And that’s not all!  Here’s what I have planned for the next few months:
      </p>
      <ul>
       <li>
        More contributions to MDN, much of it in the CSS space, but also branching out into documenting some up-and-coming APIs in areas that are fairly new to me.  (Details to come!)
       </li>
       <li>
        Contributions to the
        <a href="https://web-platform-tests.org/">
         Web Platform Tests
        </a>
        (WPT), once I get familiar with how that process is structured.
       </li>
       <li>
        Articles on topics that will include (but are not limited to!) gaps in CSS, logical properties, and styling based on writing direction.  I haven’t actually settled on outlets for those yet, so if you’d be interested in publishing any of them, hit me up.  I usually aim for about a thousand words, including example markup and CSS.
       </li>
       <li>
        Very likely will rejoin the
        <a href="https://www.w3.org/Style/CSS/members.en.html">
         CSS Working Group
        </a>
        after a
        <small>
         (mumblecough)
        </small>
        -year absence.
       </li>
       <li>
        Assembling a Raspberry Pi system to test out
        <a href="https://wpewebkit.org">
         WPEWebKit
        </a>
        in its native, embedded environment and get a handle on how to create a “setting up WPEWebKit for total embedded-device noobs”, of which I am one.
       </li>
      </ul>
      <p>
       That last one will be an entirely new area for me, as I’ve never really worked with an embedded-device browser before.  WPEWebKit is a WebKit port, actually
       <em>
        the
       </em>
       official WebKit port for embedded devices, and as such is aggressively tuned for performance and low resource demand.  I’m really looking forward to not only seeing what it’s like to use it, but also how I might be able to leverage it into some interesting projects.
      </p>
      <p>
       WPEWebKit is one of the reasons why Igalia is such a big contributor to WebKit, helping drive its standards support forward and raise its interoperability with other browser engines.  There’s a thread of self-interest there: a better WebKit means a better WPEWebKit, which means more capable embedded devices for Igalia’s clients.  But after a month on the inside, I feel comfortable saying most of Igalia’s commitment to interoperability is philosophical in nature—they truly believe that more consistency and capability in web browsers benefits everyone.  As in,
       <a href="https://www.youtube.com/watch?v=UMNFehJIi0E">
        <strong>
         <tt>
          THIS IS FOR EVERYONE
         </tt>
        </strong>
       </a>
       .
      </p>
      <p>
       And to go along with that, more knowledge and awareness is seen as an unvarnished good, which is why they’re having me working on MDN content.  To that end, I’m putting out an invitation here and now: if you come across a page on MDN about CSS or HTML that confuses you, or seems inaccurate, or just doesn’t have much information at all, please get in touch to let me know,
       <strong>
        particularly
       </strong>
       if you are
       <em>
        not
       </em>
       a native English speaker.
      </p>
      <p>
       I can’t offer translation services, unfortunately, but I can do my best to make the English content of MDN as clear as possible.  Sometimes, what makes sense to a native English speaker is obscure or unclear to others.  So while this offer is open to everyone, don’t hold back if you’re struggling to parse the English.  It’s more likely the English is unclear and imprecise, and I’d like to erase that barrier if I can.
      </p>
      <p>
       The best way to submit a report is to
       <a href="mailto:emeyer@igalia.com?Subject=[MDN]">
        send me email with
        <tt>
         [MDN]
        </tt>
        and the URL of the page you’re writing about
       </a>
       in the subject line.  If you’re writing about a collection of pages, put the URLs into the email body rather than the subject line, but please keep the
       <tt>
        [MDN]
       </tt>
       in the subject so I can track it more easily.  You can also
       <a href="https://twitter.com/meyerweb">
        ping me on Twitter
       </a>
       , though I’ll probably ask you to email me so I don’t lose track of the report.  Just
       <abbr title="For Your Information">
        FYI
       </abbr>
       .
      </p>
      <p>
       I feel like there was more, but this is getting long enough and anyway, it already seems like a lot.  I can’t wait to share more with you in the coming months!
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2021/03/15/month-one/">
          First Month at Igalia
         </a>
        </cite>
        was published on
        <time>
         Monday, March 15th, 2021
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/tech/standards/" rel="category tag">
         Standards
        </a>
        and
        <a href="https://meyerweb.com/eric/thoughts/category/personal/work/" rel="category tag">
         Work
        </a>
        categories.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2021/03/15/month-one/#respond">
         no replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2021/02/22/week-one/" rel="bookmark" title="Permanent Link: First Week at Igalia">
        First Week at Igalia
       </a>
      </h2>
      <em class="pubtime">
       Published  3 weeks, 6 days past
      </em>
     </header>
     <div class="text">
      <p>
       The first week on the job at
       <a href="https://igalia.com/">
        Igalia
       </a>
       was… it was good, y’all.  Upon formally joining the Support Team, got myself oriented, built a series of tests-slash-demos that will be making their way into some forthcoming posts and videos, and forked a copy of the
       <a href="https://developer.mozilla.org/">
        Mozilla Developer Network
       </a>
       (MDN) so I can start making edits and pushing them to the public site.  In fact,
       <a href="https://github.com/mdn/content/commit/4af179d666bb865862f6cc5b1361346d2e6d8061#diff-37aea9089a7b47a834b7baa736bda298d1a473b71a4f8d3eb713f03bef6e3a00">
        the first of those edits
       </a>
       landed Sunday night!  And there was the usual setting up accounts and figuring out internal processes and all that stuff.
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/igalia-weekone.png">
        <img alt="A series of tests of the CSS logical property ';block-border'." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/igalia-weekone.png"/>
       </a>
       <figcaption>
        Illustrating the uses of
        <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-block">
         <code>
          border-block
         </code>
        </a>
        .
       </figcaption>
      </figure>
      <p>
       To be perfectly honest, a lot of my first-week momentum was provided by the rest of the Support Team, and setting expectations during the interview process.  You see, at one point in the past I had a position like this, and I had problems meeting expectations.  This was partly due to my inexperience working in that sort of setting, but also partly due to a lack of clear communication about expectations.  Which I know because I thought I was doing well in meeting them, and then was told otherwise in evaluations.
      </p>
      <p>
       So when I was first talking with the folks at Igalia, I shared that experience.  Even though I knew Igalia has a different approach to management and evaluation, I told them repeatedly, “If I take this job, I want you to point me in a direction.”  They’ve done exactly that, and it’s been great.  Special thanks to
       <a href="https://bkardell.com/" rel="met contact co-worker colleague">
        Brian Kardell
       </a>
       in this regard.
      </p>
      <p>
       I’m already looking forward to what we’re going to do with the demos I built and am still refining, and to making more MDN edits, including some upgrades to code examples.  And I’ll have more to say about MDN editing soon.  Stay tuned!
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2021/02/22/week-one/">
          First Week at Igalia
         </a>
        </cite>
        was published on
        <time>
         Monday, February 22nd, 2021
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/personal/projects/" rel="category tag">
         Projects
        </a>
        ,
        <a href="https://meyerweb.com/eric/thoughts/category/tech/standards/" rel="category tag">
         Standards
        </a>
        , and
        <a href="https://meyerweb.com/eric/thoughts/category/personal/work/" rel="category tag">
         Work
        </a>
        categories.
       </li>
       <li class="cmt">
        There has been
        <a href="https://meyerweb.com/eric/thoughts/2021/02/22/week-one/#comments">
         one reply
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2021/02/15/first-day-at-igalia/" rel="bookmark" title="Permanent Link: First Day at Igalia">
        First Day at Igalia
       </a>
      </h2>
      <em class="pubtime">
       Published  1 month, 4 days past
      </em>
     </header>
     <div class="text">
      <p>
       Today is my first day as a full-time employee at
       <a href="https://www.igalia.com/">
        Igalia
       </a>
       , where I’ll be doing a whole lot of things I love to do: document and explain web standards at
       <a href="https://developer.mozilla.org/">
        <abbr title="Mozilla Developer Network">
         MDN
        </abbr>
       </a>
       and other places, participate in standards work at the W3C, take on some webmaster duties, and play a part in planning Igalia’s strategy with respect to advancing the web.  And likely other things!
      </p>
      <p>
       I’ll be honest, this is a pretty big change for me.  I haven’t worked for anyone other than myself since 2003.  But the last time I did work for someone else, it was for Netscape (slash AOL slash Time Warner) as a Standards Evangelist, a role I very much enjoyed.  In many ways, I’m taking that role back up at Igalia, in a company whose values and structure are much more in line with my own.  I’m really looking forward to finding out what we can do together.
      </p>
      <p>
       If the name Igalia doesn’t ring any bells, don’t worry: nobody outside the field has heard of them, and most people inside the field haven’t either.  So, remember when CSS Grid came to browsers back in 2017?  Igalia did the implementation that landed in Safari and Chromium.  They’ve done a lot of other things besides that—some of which I’ll be helping to spread the word about—but it’s the thing that web folks will be most likely to recognize.
      </p>
      <p>
       This being my first day and all, I’m still deep in the setting up of logins and filling out of forms and general orienting of oneself to a new team and set of opportunities to make a positive difference, so there isn’t much more to say besides I’m stoked and planning to say more a little further down the road.  For now, onward!
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2021/02/15/first-day-at-igalia/">
          First Day at Igalia
         </a>
        </cite>
        was published on
        <time>
         Monday, February 15th, 2021
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/tech/standards/" rel="category tag">
         Standards
        </a>
        and
        <a href="https://meyerweb.com/eric/thoughts/category/personal/work/" rel="category tag">
         Work
        </a>
        categories.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2021/02/15/first-day-at-igalia/#comments">
         thirteen replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2021/01/01/highlighting-accessible-twitter-content/" rel="bookmark" title="Permanent Link: Highlighting Accessible Twitter Content">
        Highlighting Accessible Twitter Content
       </a>
      </h2>
      <em class="pubtime">
       Published  2 months, 2 weeks past
      </em>
     </header>
     <div class="text">
      <p>
       For my 2020 holiday break, I decided to get more serious about supporting the use of alternative text on Twitter.  I try to be rigorous about adding descriptive text to my images,
       <abbr title="Graphics Interchange Format">
        GIF
       </abbr>
       s, and videos, but I want to be more conscientious about not spreading inaccessible content through my retweets.
      </p>
      <p>
       The thing is, Twitter doesn’t make it obvious whether someone else’s content has been described, and the way it structures (if I can reasonably use that word) its content makes it annoyingly difficult to conduct element or accessibility-property inspections.  So, in keeping with the design principles that underlie both the Web and CSS, I decided to take matters into my own hands.  Which is to say, I wrote a user stylesheet.
      </p>
      <p>
       I started out by calling out things that lacked useful
       <code>
        alt
       </code>
       text.  It went something like this:
      </p>
      <pre class="css"><code>div[aria-label="Image"]::before {
	content: "WARNING: no useful ALT text";
	background: yellow;
	border: 0.5em solid red;
	border-radius: 1em;
	box-shadow: 0 0 0.5em black;
	…
</code></pre>
      <p>
       …and so on, layering on some sizing, font stuff, and positioning to hopefully place the text where it would be visible.  This failed to satisfy for two reasons:
      </p>
      <ol>
       <li>
        Because of the way Twitter nests it dozens of repeatedly utility-classes
        <code>
         div
        </code>
        s, and the styles repeatedly applied thereby, many images were tall (but cut off) or wide (ditto) in ways that pulled the positioned generated text out of the visible frame shown on the site.  There wasn’t an easily-found human-readable predictable way to address the element I wanted to use as a positioning context.  So that was a problem.
       </li>
       <li>
        Almost every image in my feed had a big red and yellow WARNING on it, which quickly depressed me.
       </li>
      </ol>
      <p>
       What I realized was that rather than calling out the failures, I needed to highlight the successes.  So I commented out the
       <a href="https://crazybat.ca/blog/tbt-big-red-angry-text/">
        Big Red Angry Text
       </a>
       approach above and got a lot more simple.
      </p>
      <pre class="css"><code>div[aria-label="Image"] {
	filter: grayscale(1) contrast(0.5);
}
div[aria-label="Image"]:hover {
	filter: none;
}

</code></pre>
      <figure>
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/twitter-alt-text.png">
        <img alt="A screenshot of the author’s Twitter timeline, showing three tweets.  The middle tweet is text only.  The top tweet has a blurred-out image which is grayscale and of reduced contrast, indicating it has no useful alternative text.  The bottom tweet is also blurred, but it full color and contrast, indicating it has been given useful alternative text by the person who posted it." class="framed" src="https://meyerweb.com/eric/thoughts/wp-content/uploads/twitter-alt-text.png"/>
       </a>
       <figcaption>
        Three consecutive tweets from my timeline on Friday, January 1st, 2021.  The blurring of the images in the top and bottom tweets is an effect of the Data Saver preference, not my CSS.
       </figcaption>
      </figure>
      <p>
       Just that.  De-emphasize the images that have the default
       <code>
        alt
       </code>
       text by way of their enclosing
       <code>
        div
       </code>
       s, and remove that effect on hover so I can see the image as intended if I so choose.  I like this approach better because it de-emphasizes images that aren’t properly described, while those which are described get a visual pop.  They stand out as lush islands in a flat sea.
      </p>
      <p>
       In case you’ve been wondering why I’m selecting
       <code>
        div
       </code>
       s instead of
       <code>
        img
       </code>
       and
       <code>
        video
       </code>
       elements, it’s because I use the Data Saver setting on Twitter, which requires me to click on an image or video to load it.  (You can set it via Settings &gt; Accessibility, display and languages &gt; Data usage &gt; Data saver.  It’s also what’s blurring the images in the screenshot shown here.)  I enable this setting to reduce network load, but also to give me an extra layer of protection when disturbing images and videos circulate.  I generally follow people who are careful about not sharing disturbing content, but I sometimes go wandering outside my main timeline, and never know what I’ll find out there.
      </p>
      <p>
       After some source digging, I discovered a decent way to select non-described videos, which I combined with the existing image styles:
      </p>
      <pre class="css"><code>div[aria-label="Image"],
div[aria-label="Embedded video"] {
	filter: grayscale(1) contrast(0.5);
}
div[aria-label="Image"]:hover,
div[aria-label="Embedded video"]:hover {
	filter: none;
}
</code></pre>
      <p>
       The fun part is, Twitter’s architecture spits out nested
       <code>
        div
       </code>
       s with that same
       <abbr title="Accessible Rich Internet Applications">
        ARIA
       </abbr>
       label for videos, which I imagine could be annoying to people using screen readers.  Besides that, it also has the effect of applying the
       <code>
        filter
       </code>
       twice, which means videos that haven’t been described get their contrast double-reduced!  And their grayscale double-enforced!  Fun.
      </p>
      <p>
       What I didn’t expect was that when I start playing a video, it loses the grayscale and contrast reduction effects even when not being hovered, which makes the second rule above a little over-written.  I don’t see the
       <abbr title="Document Object Model">
        DOM
       </abbr>
       structure changing a whole lot when the video loads and plays, so either videos are being treated differently for filter purposes, or I’m missing something in the DOM that’s invalidating the selector matching.  I might poke at it over time to find a fix, or I may just let it go.  The user experience isn’t too far off what I wanted anyway.
      </p>
      <p>
       There is a gap in my coverage, which is GIFs pulled from Twitter’s GIF pool.  These have default
       <code>
        alt
       </code>
       text other than
       <code>
        Image
       </code>
       , which makes selecting for them next to impossible.  Just a few examples pulled from Firefox’s Accessibility panel when I searched the GIF panel for “this is a test”:
      </p>
      <pre>testing GIF
This Is ATest Fool GIF
Corona Test GIF by euronews
Test Fail GIF
Corona Virus GIF by guardian
Its ATest Josh Subdquist GIF
Corona Stay Home GIF by INTO ACTION
Is This A Test GIF
Stressed Out Community GIF
A1b2c3 GIF
</pre>
      <p>
       I assume these are Giphy titles or something like that.  In nearly every case, they’re insufficient, if not misleading or outright useless.  I looked for markers in the DOM to be able to catch these, but didn’t find anything that was obviously useful.
      </p>
      <p>
       I did think briefly about filtering for any
       <code>
        aria-label
       </code>
       that contains the string
       <code>
        GIF
       </code>
       (
       <code>
        [aria-label*="GIF"]
       </code>
       ), but that would improperly catch images and videos that have been described but happen to have the string
       <code>
        GIF
       </code>
       inside them somewhere.  This might be a relatively rare occurrence, but I’m loth to gray out media that someone went to the effort of describing.  I may change my mind about this, but for now, I’m accepting that GIFs which appear in full color are probably not described, particularly when containing common memes, and will try to be careful.
      </p>
      <p>
       I apply the above styles in Firefox using
       <a href="https://github.com/openstyles/stylus/wiki">
        Stylus
       </a>
       , which also available for Chrome, and they’re working pretty well for me.  I wish I could figure out a way to apply them in mobile contexts, but that’s a (much bigger) problem for another day.
      </p>
      <p>
       I’m not the first to tread this ground, nor do I expect to be the last, sadly.  For a deeper dive into all the details of Twitter accessibility and the pitfalls that can occur, please read
       <a href="https://adrianroselli.com/">
        Adrian Roselli
       </a>
       ’s excellent article
       <a href="https://adrianroselli.com/2018/01/improving-your-tweet-accessibility.html">
        Improving Your Tweet Accessibility
       </a>
       from just over two years ago.  And if you want apply accessibility-aid CSS to your own Twitter experience but can’t or won’t use Stylus, Adrian has
       <a href="https://adrianroselli.com/2015/01/css-bookmarklets-for-testing-and-fixing.html#NewTwitterAlt">
        a bookmarklet that injects Twitter
        <code>
         alt
        </code>
        text
       </a>
       all set up and ready to go—you can use it as-is, or replace the CSS in his bookmarklet with mine above or your own if you want to take a different approach.
      </p>
      <p>
       So that’s how I’m upping my awareness of accessible content on Twitter in 2021.  I’d love to hear what y’all are using to improve your own experiences, or links to tools and resources on this same topic.  If you have any of that, please drop the links in a comment below, so that everyone who reads this can benefit.  Thanks!
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2021/01/01/highlighting-accessible-twitter-content/">
          Highlighting Accessible Twitter Content
         </a>
        </cite>
        was published on
        <time>
         Friday, January 1st, 2021
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/tech/css/" rel="category tag">
         CSS
        </a>
        and
        <a href="https://meyerweb.com/eric/thoughts/category/hacks/" rel="category tag">
         Hacks
        </a>
        categories.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2021/01/01/highlighting-accessible-twitter-content/#respond">
         no replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2020/09/29/polite-bash-commands/" rel="bookmark" title="Permanent Link: Polite Bash Commands">
        Polite Bash Commands
       </a>
      </h2>
      <em class="pubtime">
       Published  5 months, 3 weeks past
      </em>
     </header>
     <div class="text">
      <p>
       For years, I’ve had a bash alias that re-runs the previous command via
       <code>
        sudo
       </code>
       .  This is useful in situations where I try to do a thing that requires root access, and I’m not root (because I am
       <em>
        never
       </em>
       root).  Rather than have to retype the whole thing with a
       <code>
        sudo
       </code>
       on the front, I just type
       <kbd>
        please
       </kbd>
       and it does that for me.  It looked like this in my
       <code>
        .bashrc
       </code>
       file:
      </p>
      <pre class="bash"><code>alias please='sudo "$BASH" -c "$(history -p !!)"'
</code></pre>
      <p>
       But then, the other day, I saw
       <a href="https://twitter.com/ctrlshifti/status/1160812366293901314">
        Kat Maddox’s tweet
       </a>
       about how she aliases
       <code>
        please
       </code>
       straight to
       <code>
        sudo
       </code>
       , so to do things as root, she types
       <kbd>
        please apt update
       </kbd>
       , which is equivalent to
       <kbd>
        sudo apt update
       </kbd>
       .  Which is pretty great, and I want to do that!  Only, I already have that word aliased.
      </p>
      <p>
       What to do?  A bash function!  After commenting out my old alias, here’s what I added to
       <code>
        .bash_profile
       </code>
       :
      </p>
      <pre class="bash"><code>please() {
	if [ "$1" ]; then
		sudo $@
	else
		sudo "$BASH" -c "$(history -p !!)"
	fi
}
</code></pre>
      <p>
       That way, if I remember to type
       <kbd>
        please apachectl restart
       </kbd>
       , as in Kat’s setup, it will ask for the root password and then execute the command as root; if I forget my manners and simply type
       <kbd>
        apachectl restart
       </kbd>
       , then when I’m told I don’t have privileges to do that, I just type
       <kbd>
        please
       </kbd>
       and the old behavior happens.  Best of both worlds!
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2020/09/29/polite-bash-commands/">
          Polite Bash Commands
         </a>
        </cite>
        was published on
        <time>
         Tuesday, September 29th, 2020
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/hacks/" rel="category tag">
         Hacks
        </a>
        and
        <a href="https://meyerweb.com/eric/thoughts/category/tech/tools/" rel="category tag">
         Tools
        </a>
        categories.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2020/09/29/polite-bash-commands/#comments">
         seven replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2020/09/04/reply-links-in-rss-items/" rel="bookmark" title="Permanent Link: Reply links in RSS items">
        Reply links in RSS items
       </a>
      </h2>
      <em class="pubtime">
       Published  6 months, 2 weeks past
      </em>
     </header>
     <div class="text">
      <p>
       Inspired by
       <a href="https://destroytoday.com/blog/reply-link-in-rss-feed-posts">
        Jonnie Hallman
       </a>
       , I’ve added a couple of links to the bottom of
       <acronym title="Really Simple Syndication">
        RSS
       </acronym>
       items here on meyerweb: a link to the commenting form on the post, and a
       <code>
        mailto:
       </code>
       link to send me an email reply.  I prefer that people comment, so that other readers can gain from the reply’s perspective, but not all comments are meant to be public.  Thus, the direct-mail option.
      </p>
      <p>
       As Jonnie says, it would be ideal if all RSS readers just used the value of the
       <code>
        author
       </code>
       element (assuming it’s an email address) to provide an email action; if they did, I’d almost certainly add mine to my posts.  Absent that, adding a couple of links to the bottom of RSS items is a decent alternative.
      </p>
      <p>
       Since the blog portion of meyerweb (and therefore its RSS) are powered by WordPress, I added these links programmatically via the
       <code>
        functions.php
       </code>
       file in the site’s theme.  It took me a bit to work out how to do that, so here it is in slightly simplified form (
       <ins>
        update: there’s an even more simplified and efficient version later in the post
       </ins>
       ):
      </p>
      <pre class="php"><code>function add_contact_links ( $text ) {
   if (is_feed()) {
      $text .= '
      &lt;hr&gt;&lt;p&gt;&lt;a href="' . get_permalink($post) . '#commentform"&gt;Add a comment to the post, or &lt;a href="mailto:admin@example.com?subject=In%20reply%20to%20%22' . str_replace(' ', '%20', get_the_title()) . '%22"&gt;email a reply&lt;/a&gt;.&lt;/p&gt;';
   }
   return $text;
}
add_filter('the_content', 'add_contact_links');
</code></pre>
      <p>
       If there’s a more efficient way to do that in WordPress, please leave a comment to tell the world, or email me if you just want me to know.  Though I’ll warn you, a truly better solution will likely get blogged here, so if you want credit, say so in the email.  Or just leave a comment!  You can even use Markdown to format your code snippets.
      </p>
      <hr/>
      <p class="update">
       <strong>
        Update 2020-09-10:
       </strong>
       <a href="https://meyerweb.com/eric/thoughts/2020/09/04/reply-links-in-rss-items/#comment-3711850">
        David Lynch shared
       </a>
       a more efficient way to do this, using the WordPress hook
       <code>
        the_feed_content
       </code>
       instead of plain old
       <code>
        the_content
       </code>
       .  That removes the need for the
       <code>
        is_feed()
       </code>
       check, so the above becomes the more compact:
      </p>
      <pre class="php"><code>function add_contact_links ( $text ) {
   $text .= '
   &lt;hr&gt;&lt;p&gt;&lt;a href="' . get_permalink($post) . '#commentform"&gt;Add a comment to the post, or &lt;a href="mailto:admin@example.com?subject=In%20reply%20to%20%22' . str_replace(' ', '%20', get_the_title()) . '%22"&gt;email a reply&lt;/a&gt;.&lt;/p&gt;';
   return $text;
}
add_filter('the_feed_content', 'add_contact_links');
</code></pre>
      <p>
       Thanks, David!
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2020/09/04/reply-links-in-rss-items/">
          Reply links in RSS items
         </a>
        </cite>
        was published on
        <time>
         Friday, September 4th, 2020
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/hacks/" rel="category tag">
         Hacks
        </a>
        category.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2020/09/04/reply-links-in-rss-items/#comments">
         three replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2020/07/01/accordion-rows-in-css-grid/" rel="bookmark" title="Permanent Link: Accordion Rows in CSS Grid">
        Accordion Rows in CSS Grid
       </a>
      </h2>
      <em class="pubtime">
       Published  8 months, 2 weeks past
      </em>
     </header>
     <div class="text">
      <style type="text/css">
       figure.standalone img {max-width: 75%;}
      </style>
      <p>
       Another aspect of
       <a href="https://meyerweb.com/eric/thoughts/2020/04/13/hamonshu/">
        the meyerweb redesign
       </a>
       I’d like to explore is the way I’m using CSS Grid rows to give myself more layout flexibility.
      </p>
      <p>
       First, let’s visualize the default layout of a page here on meyerweb.  It looks something like this:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig01.png">
        <img alt="A page layout diagram showing a header stretching across the top of the page, a footer stretching across the bottom of the page, and three columns of content between them: two sidebars to either side, and a main content column in the middle." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig01.png"/>
       </a>
      </figure>
      <p>
       So simple, even flexbox could do it!  But that’s only if things always stay this simple.  I knew they probably wouldn’t, because the contents in those two sidebars were likely to vary from one part of the site to another—and I would want, in some cases, for the sidebar pieces to line up vertically.  Here’s an example:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig02.png">
        <img alt="A page layout diagram showing a header stretching across the top of the page, a footer stretching across the bottom of the page, and three columns of content between them. There is a main content column in the middle which stretches full-height between the header and footer. In the right sidebar, there are three boxes, labeled 'navigation', 'feeds', and 'categories', arranged in that order, top to bottom. In the left sidebar, there is a single box labeled 'archives' that isn’t as tall as the main content column. Its top edge is vertically aligned with the top edge of 'feeds', the second box in the right-hand sidebar." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig02.png"/>
       </a>
      </figure>
      <p>
       That’s the basic layout of
       <a href="https://meyerweb.com/eric/thoughts/">
        archive pages
       </a>
       .  See how the left sidebar’s Archives lines up with the top of the Feeds box in the right sidebar?  That’s Grid for you.  I thought about lumping the Feeds and Categories into a the same grid cell (thus making them part of the same grid row), which would have meant wrapping them in a
       <code>
        &lt;div&gt;
       </code>
       , but decided keeping them separate allows more flexibility in terms of responsive rearrangement of content.  I can, for example, assign the Feeds to be followed by Archives and then Categories at mobile sizes.  Or to reverse that order.
      </p>
      <p>
       More to the point, I also wanted the ability to place things along the
       <em>
        bottoms
       </em>
       of the sidebars, down near the footer but still next to the main content column, like so:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig03.png">
        <img alt="A page layout diagram similar to the previous diagram, with header and footer, main content column, and the 'archives' box in the left sidebar; and 'navigation, 'feeds', and 'categories' in the right sidebar. This figure adds 'box1' and 'box2' to the bottom of the left sidebar, and 'box3' to the bottom of the right sidebar. The bottom edges of 'box2' and 'box3' are vertically aligned with the bottom of the main column." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig03.png"/>
       </a>
      </figure>
      <p>
       An early design prototype for the blog archives put the “Next post” and “Previous post” links in some of those spots, before I moved the links into the bottom of the main content column.  So at the moment, I don’t have anything making use of those spots, although the capability is there.  I could cluster content along the tops
       <em>
        and
       </em>
       the bottoms of the sidebars, as needed.
      </p>
      <p>
       But here’s the important thing, and really the point of this article: I’m not rewriting the row structure and grid cell assignments for each page type.  There’s a unified row template applied to the
       <code>
        body
       </code>
       on every page that uses the Hamonshū design.  It is:
      </p>
      <pre class="css"><code>grid-template-rows: repeat(7,min-content) 1fr repeat(3,min-content);
</code></pre>
      <p>
       The general idea here is, the first seven rows are sized to be the minimum necessary to contain content inside those rows.  This is also true of the last three rows.  And in between those sets, a
       <code>
        1fr
       </code>
       row that takes up the rest of the grid container’s height, pushing the two sets apart.
      </p>
      <p>
       In the simplest case, where there’s just a header, main content column, and a footer, with nothing in the sidebars (the layout has three columns, remember), the content will fill the rows like so:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig04.png">
        <img alt="A page layout diagram showing a header stretching across the top of the page, a footer stretching across the bottom of the page, and a main content column. There is open space to the sides of the main content column." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig04.png"/>
       </a>
      </figure>
      <p>
       Here’s the Grid CSS to make that happen:
      </p>
      <pre class="css"><code>header {grid-row: 1; grid-column: 1 / -1;}
footer {grid-row: -2; grid-column: 1 / -1;}
main {grid-row: 2; grid-column: 2;}
</code></pre>
      <p>
       Thus: The header fills all of row one.  The content expands row two from its placement in the center column.  The footer fills all of the last row, which is specified via
       <code>
        grid-row: -2
       </code>
       (because
       <code>
        grid-row: -1
       </code>
       would align its top with the bottom edge of the grid container).  There’s no more content, so all the other
       <code>
        min-content
       </code>
       rows have no content, so their height is zero.  And there’s no leftover height to soak up, so the
       <code>
        1fr
       </code>
       row also has a height of zero.  Seems like a lot of rows specified to no real purpose, doesn’t it?
      </p>
      <p>
       But now, let’s add some sidebar content to columns one and three; that is, the sidebars.  For example, you might remember this layout from before:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig02.png">
        <img alt="The same as figure 2. To recap: A page layout diagram showing a header stretching across the top of the page, a footer stretching across the bottom of the page, and three columns of content between them. There is a main content column in the middle which stretches full-height between the header and footer. In the right sidebar, there are " src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig02.png"/>
       </a>
      </figure>
      <p>
       Given this setup, we can’t just assign the main content column to
       <code>
        grid-row: 2
       </code>
       and leave it at that—it’s going to have to span rows.  Really, it needs to span all but the last, thus ensuring it reaches down to the footer.  So the CSS ends up like this:
      </p>
      <pre class="css"><code>header, footer {grid-row: 1; grid-column: 1/-1;}
footer {grid-row: -2;}
main {grid-column: 2; grid-row: 2/-2;}
nav {grid-row: 2; grid-column: 3;}
.archives {grid-row: 3 / span 3;}
.feeds {grid-row: 3; grid-column: 3;}
.categories {grid-row: 4; grid-column: 3;}
</code></pre>
      <p>
       And as a result, the rows end up like this:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig06.png">
        <img alt="The same as the previous diagram, but in this case the main content column is taller. Purple dashed lines show where the grid lines are placed in this layout; in particular, they make it clear that the 'navigation', 'feeds', 'categories' boxes in the right-hand sidebar are placed in separate grid rows, and the 'archives' box in the left-hand sidebar spans three grid rows." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig06.png"/>
       </a>
       <figcaption>
        Grid-line visualization courtesy the Firefox Web Inspector.
       </figcaption>
      </figure>
      <p>
       The first set of
       <code>
        min-content
       </code>
       rows are all gathered up against the bottom of the top part of the layout, and the second set are all pushed down at the bottom.  Between them, the
       <code>
        1fr
       </code>
       row eats up all the leftover space, which is what pushes the two sets of
       <code>
        min-content
       </code>
       rows apart.
      </p>
      <p>
       I
       <em>
        like
       </em>
       this pattern.  It feels good to me, having two sets of rows where the individual rows accordion open to accept content when needed, and collapse to zero height when not, with a “blank” row in between the sets that pushes them apart.  It’s flexible, and even allows me to add more rows to the sets without having to rewrite all my layout styles.
      </p>
      <p>
       As an example, suppose I decided I needed to add a few more rows to the bottom set, for use in a few specialty templates.  Because of the way things are set up, all I have to do is change the row template like this:
      </p>
      <pre class="css"><code>grid-template-rows: repeat(7,min-content) 1fr repeat(5,min-content);
</code></pre>
      <p>
       That’s everything. I just changed the number of repeats in the second set of rows.  All the existing pages will continue on just fine, no layout changes, no CSS changes.  In the few (currently hypothetical) pages where I need to put a bunch of stuff along the bottom of the main content column, I just plug them in using
       <code>
        grid-row
       </code>
       values, whether positive or negative.  It all just works.
      </p>
      <p>
       The same is true if more rows are added to the first set, for whatever reason.  Everything gets managed in a single CSS rule, where you can add rows for the whole site instead of having to write, track, and maintain a bunch of variants for various page types.  (Subtracting rows is harder without causing layout upset, but could still be done in some scenarios.)
      </p>
      <p>
       As a final note, you’re probably wondering: Is that one
       <code>
        1fr
       </code>
       row actually
       <em>
        necessary
       </em>
       to get a layout like this one?  Not really, no.  Let’s take it out, like this:
      </p>
      <pre class="css"><code>grid-template-rows: repeat(11,min-content);
</code></pre>
      <p>
       What happens as a result is the rows that aren’t directly occupied by content (the ones that previously collapsed to zero height), but are still spanned by content (the center column), divvy up the leftover space the
       <code>
        1fr
       </code>
       row used to consume.  This leads to a situation like so:
      </p>
      <figure class="standalone">
       <a href="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig07.png">
        <img alt="The same layout diagram as the previous figure, but with some of the grid rows placed differently." src="https://meyerweb.com/eric/thoughts/wp-content/uploads/fig07.png"/>
       </a>
      </figure>
      <p>
       To the user, there’s no practical difference.  Things go to the same places either way.  You just get the “extra” rows stretching out, instead of being pushed apart by the
       <code>
        1fr
       </code>
       row.
      </p>
      <p>
       I certainly could have left it at that, and it arguably would have been cleaner to do so.  But something about this approach doesn’t sit quite right with me; there’s a tickly feeling in the back of my instinct that tells me there’s a downside to this.  Admittedly, it could be a vestigial instinct from the Age of Floats; I doubtless have many things I still have not unlearned.  On the other hand, it could be something about Grid I’ve picked up on subconsciously but haven’t yet brought into full realization.
      </p>
      <p>
       If I ever pin the tickle down enough to articulate it, I’ll update the post to include it.
      </p>
      <p class="note">
       Thanks to
       <a href="https://kitt.hodsden.org/">
        Kitt Hodsden
       </a>
       and
       <a href="https://laurakalbag.com/">
        Laura Kalbag
       </a>
       for their assistance with this article.
      </p>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2020/07/01/accordion-rows-in-css-grid/">
          Accordion Rows in CSS Grid
         </a>
        </cite>
        was published on
        <time>
         Wednesday, July 1st, 2020
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/tech/css/" rel="category tag">
         CSS
        </a>
        category.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2020/07/01/accordion-rows-in-css-grid/#comments">
         six replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
    <article class="entry" role="article">
     <header>
      <h2 class="title">
       <a href="https://meyerweb.com/eric/thoughts/2020/06/07/forever-and-ever/" rel="bookmark" title="Permanent Link: Forever and Ever">
        Forever and Ever
       </a>
      </h2>
      <em class="pubtime">
       Published  9 months, 1 week past
      </em>
     </header>
     <div class="text">
      <p>
       We had been awake since one in the morning.  She had been unconscious since three in the morning.
      </p>
      <p>
       We’d been taking turns sleeping with Rebecca in the nights leading up to that day, six years ago today, and on the final night it had been my turn.  I was woken by a sound, from her or by her I still don’t know, and I saw that she was awake.  And had vomited.  And still could barely move.  And I knew this was it.
      </p>
      <p>
       Kat called the hospice nurse to come and give her the drugs to take away the pain, and we waited, sick with despair and doing everything we could not to show it.
      </p>
      <p>
       We gently held her as she trembled.  We kissed her head through her curly hair, told her that we were here with her and that she could go, not to be afraid, we’d be there with her soon.  Lying to her, now, finally, so far past the point where truth was kind or helpful, telling her whatever we thought would take away even a tiny slice of the fear.  Shamelessly, literally shamelessly, weaponizing all the trust we had built up over the years by telling her the truth her whole life, to ease, if we could, the last hours of it.
      </p>
      <p>
       Her eyes were wide, even for her.  They barely blinked.  We could still catch her attention, but it was so much harder now.  The trembling increased, and then, eyes somehow still wider, she started to claw frantically at her temples, trying to dig out the thing that was killing her.  Or just to somehow relieve the pain.
      </p>
      <p>
       I had to restrain her, catch her small wrists in my hands, wrap my arms around her arms and shaking small body and brokenly tell her
       <em>
        no, stop, I know, I know, I’m so sorry, we want it to stop too, I know, we love you.
       </em>
      </p>
      <p>
       The nurse was finally there and administered a lot of narcotics.  Not enough to kill her outright, but enough to take away the pain.  And consciousness.  I almost asked him to double the dose, or triple it, whatever was necessary to end things quickly and painlessly.  I stopped only because I realized the position that would put him in.  And that if it were an option, he’d already have offered it.
      </p>
      <p>
       Waiting for the drugs to work, we read her her favorite stories, holding books up one at a time and asking if she wanted this one, this one, this one.  Her head would jerk in a prototype of a nod, and we’d open that book and read, taking turns, voices somehow as clear and steady as if we were doing normal bedtime stories.  I made a list as we went, because I knew I’d want to know later.
      </p>
      <ol>
       <li>
        <a href="https://en.wikipedia.org/wiki/Mike_Mulligan_and_His_Steam_Shovel">
         <cite>
          Mike Mulligan and His Steam Shovel
         </cite>
        </a>
       </li>
       <li>
        <a href="https://www.goodreads.com/book/show/1572485.How_the_Sun_Was_Brought_Back_to_the_Sky">
         <cite>
          How the Sun Was Brought Back to the Sky
         </cite>
        </a>
       </li>
       <li>
        <a href="https://en.wikipedia.org/wiki/Madeline">
         <cite>
          Madeline
         </cite>
        </a>
       </li>
       <li>
        <a href="https://www.goodreads.com/book/show/1870274.Jump_Rope_Magic">
         <cite>
          Jump Rope Magic
         </cite>
        </a>
       </li>
      </ol>
      <p>
       Halfway through that last, the drugs finally took hold, and she slipped into unconsciousness.
      </p>
      <p>
       Or really, semi-consciousness: some part of her was still aware of her surroundings.  Every time Kat shifted or drew away for a moment, Rebecca would whimper quietly, and only stop when she could hear and feel Kat reassuring her.  She only did so for me when I got up from the bed entirely.  I would assure her that I would be back in a minute or two, that I wasn’t going away for good.  That was enough to quiet her.  She trusted us so much.
      </p>
      <p>
       Shortly before dawn, we started sending texts to loved ones.
       <em>
        This is it.  If you want to say goodbye, you need to come today.  She has hours left.
       </em>
       And asked them to spread the word, so others would know to come.
      </p>
      <p>
       Just after dawn, at 7:22 in the morning, she crossed another threshold.
      </p>
      <p>
       <em>
        Happy birthday, Rebecca
       </em>
       , we told her with quietly trembling voices.
       <em>
        You made it.  You really did.  You’re a great big six year old now.  We love you so much.
       </em>
      </p>
      <p>
       There was no response.
      </p>
      <p>
       So many people came to see her one last time on her sixth birthday, drifted in and out of her room, a slowly shifting cast of characters supporting her, us, each other, themselves.  I don’t really remember how it felt then, barely remember who was there and who was not, but looking back now it’s like those movie scenes where one person is still, sharply in focus, while long-exposure blurs of people moving around them draw a contrast between what matters and what is incidental, between transience and permanence.
      </p>
      <p>
       Sometimes, what is still is the most transient of all.
      </p>
      <p>
       By late afternoon, there were signs the drugs weren’t enough, that she was going to start seizing despite everything.  Which in turn meant there was a risk she’d come back to a consciousness filled with nothing but incomprehensible pain.  We weren’t sure what we could do.  She’d been lying on her back all day, so nearly motionless, body flaring with fever, shallow breaths coming and going in a rhythm I kept falling into, the way you do when your child is in distress.
      </p>
      <p>
       Kat looked across at me and said,
       <em>
        She’s a side sleeper.
       </em>
      </p>
      <p>
       We rolled Rebecca onto her sleeping side, her right side, and her breath hitched, drew in slowly, and then flowed out deeply, contentedly.  Her breathing stayed slow and deep, the rhythm of sleep, comforting, except it gradually got slower and slower and slower.  Stretched out more and more over half an hour, eventually slow enough that when it stopped altogether, we almost didn’t notice.
      </p>
      <p>
       We checked for pulse.  Breath.  Pulse again.  Nothing.  For a minute.  Two.
      </p>
      <p>
       A sound came from my throat that I know now is the true sound of ultimate suffering—and as if startled by it, she drew in another breath, choking me off.
      </p>
      <p>
       We begged her to stop fighting, told her it was okay to go, we loved her, we loved her, we loved her.
      </p>
      <p>
       A few minutes later, pulse and breath stopped again.  And Rebecca was gone forever.
      </p>
      <p>
       Rebecca, who we knew so well.
      </p>
      <p>
       Rebecca, who we had barely gotten to know.
      </p>
      <p>
       Rebecca, who we will never get to know.
      </p>
      <p>
       Time has moved on, as we have, and yet some parts of us have not.  Some parts of us are caught there, six years ago today, able to do nothing but watch her slowly slip away, literally helpless to do anything except try to soothe her through the haze of drugs and thickening darkness with our words, our touch, our presence, our love.  Parts of us frozen in that passage, unchanging.
      </p>
      <p>
       Like Rebecca is now, forever, and should not be.
      </p>
      <blockquote class="poem">
       When I was One,
I had just begun.
When I was Two,
I was nearly new.
When I was Three
I was hardly me.
When I was Four,
I was not much more.
When I was Five,
I was just alive.
But now I am Six,
I’m as clever as clever,
So I think I’ll be six now for ever and ever.
       <p class="attrib">
        —‘Now We Are Six’, A.A. Milne
       </p>
      </blockquote>
      <ul class="meta">
       <li class="date">
        <cite>
         <a href="https://meyerweb.com/eric/thoughts/2020/06/07/forever-and-ever/">
          Forever and Ever
         </a>
        </cite>
        was published on
        <time>
         Sunday, June 7th, 2020
        </time>
        .
       </li>
       <li class="cat">
        It was assigned to the
        <a href="https://meyerweb.com/eric/thoughts/category/personal/" rel="category tag">
         Personal
        </a>
        and
        <a href="https://meyerweb.com/eric/thoughts/category/personal/rebecca/" rel="category tag">
         Rebecca
        </a>
        categories.
       </li>
       <li class="cmt">
        There have been
        <a href="https://meyerweb.com/eric/thoughts/2020/06/07/forever-and-ever/#comments">
         thirty-six replies
        </a>
        .
       </li>
      </ul>
     </div>
     <hr class="fallback"/>
    </article>
   </main>
   <div class="prev-next book" id="posts-pn">
    <h4>
     Browse
     <a href="/eric/thoughts/">
      the Archive
     </a>
    </h4>
    <p class="prev">
     <a href="https://meyerweb.com/eric/thoughts/page/2/">
      Earlier Entries
     </a>
    </p>
    <p class="next">
    </p>
   </div>
  </div>
  <footer id="global">
   <div>
    <div id="archipelago">
     <h4>
      Identity Archipelago
     </h4>
     <ul>
      <li>
       <a href="https://twitter.com/meyerweb" rel="me">
        <img alt="Twitter" src="/pix/icons/twitter.png"/>
       </a>
      </li>
      <li>
       <a href="https://github.com/meyerweb" rel="me">
        <img alt="GitHub" src="/pix/icons/github.png"/>
       </a>
      </li>
      <li>
       <a href="https://flickr.com/photos/meyerweb/" rel="me">
        <img alt="Flickr" src="/pix/icons/flickr.png"/>
       </a>
      </li>
      <li>
       <a href="https://dribbble.com/meyerweb" rel="me">
        <img alt="Dribbble" src="/pix/icons/dribbble.png"/>
       </a>
      </li>
      <li>
       <a href="https://facebook.com/meyerweb" rel="me">
        <img alt="Facebook" src="/pix/icons/facebook.png"/>
       </a>
      </li>
      <li>
       <a href="https://www.linkedin.com/in/meyerweb" rel="me">
        <img alt="LinkedIn" src="/pix/icons/linkedin.png"/>
       </a>
      </li>
     </ul>
    </div>
    <div id="excuse">
     <div class="panel" id="excuse">
      <h4>
       The
       <a href="/feeds/excuse/">
        excuse of the day
       </a>
       is
      </h4>
      <p>
       cosmic ray shower
      </p>
     </div>
     <!--#include virtual="/feeds/excuse/current.html" -->
    </div>
    <div class="sosumi">
     All contents of this site, unless otherwise noted, are ©1993-2021
     <!--#config timefmt="%Y" -->
     <!--#echo var="DATE_LOCAL" -->
     <strong>
      Eric A. and Kathryn S. Meyer
     </strong>
     .  All Rights Reserved.
    </div>
    <div class="credits" id="wordpress">
     "
     <a href="/eric/thoughts/">
      Thoughts From Eric
     </a>
     " is powered by
     <a href="http://wordpress.org/">
      WordPress
     </a>
     .  Most of the rest of the site is hand-authored.
    </div>
    <div class="credits" id="design">
     The ink-sketch images used in this site’s design are adapted from
     <a href="https://archive.org/search.php?query=creator%3A%22Mori%2C+Yu%CC%84zan%2C+-1917%22">
      Yūzan Mori’s
      <cite>
       <dfn title="In English: Wave Forms">
        Hamonshū
       </dfn>
      </cite>
      , Volumes 1-3
     </a>
     , published in 1903 and made available for public use by the
     <a href="https://library.si.edu/">
      Smithsonian Libraries
     </a>
     and the
     <a href="https://archive.org/">
      Internet Archive
     </a>
     .
    </div>
   </div>
  </footer>
 </body>
</html>
<!-- Dynamic page generated in 0.203 seconds. -->
